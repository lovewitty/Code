#pragma once
#include "XAsm.hpp"
typedef unsigned char BYTE;
typedef BYTE  *PBYTE;
typedef void *LPVOID;

// apex的getopcodelen
static unsigned long MaskTable[518]={0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00008000, 0x00008000, 0x00000000, 0x00000000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00008000, 0x00008000, 0x00000000, 0x00000000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00008000, 0x00008000, 0x00000000, 0x00000000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00008000, 0x00008000, 0x00000000, 0x00000000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00008000, 0x00008000, 0x00000008, 0x00000000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00008000, 0x00008000, 0x00000008, 0x00000000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00008000, 0x00008000, 0x00000008, 0x00000000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00008000, 0x00008000, 0x00000008, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00004000, 0x00004000,0x00000008, 0x00000008, 0x00001008, 0x00000018,0x00002000, 0x00006000, 0x00000100, 0x00004100,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000100, 0x00000100, 0x00000100, 0x00000100,0x00000100, 0x00000100, 0x00000100, 0x00000100,0x00000100, 0x00000100, 0x00000100, 0x00000100,0x00000100, 0x00000100, 0x00000100, 0x00000100,0x00004100, 0x00006000, 0x00004100, 0x00004100,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00002002, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000020, 0x00000020, 0x00000020, 0x00000020,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000100, 0x00002000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000100, 0x00000100, 0x00000100, 0x00000100,0x00000100, 0x00000100, 0x00000100, 0x00000100,0x00002000, 0x00002000, 0x00002000, 0x00002000,0x00002000, 0x00002000, 0x00002000, 0x00002000,0x00004100, 0x00004100, 0x00000200, 0x00000000,0x00004000, 0x00004000, 0x00004100, 0x00006000,0x00000300, 0x00000000, 0x00000200, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00000100, 0x00000100, 0x00000000, 0x00000000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00000100, 0x00000100, 0x00000100, 0x00000100,0x00000100, 0x00000100, 0x00000100, 0x00000100,0x00002000, 0x00002000, 0x00002002, 0x00000100,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000008, 0x00000000, 0x00000008, 0x00000008,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00004000, 0x00004000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF,0x00000000, 0x00000000, 0x00000000, 0x00000000,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0x00002000, 0x00002000, 0x00002000, 0x00002000,0x00002000, 0x00002000, 0x00002000, 0x00002000,0x00002000, 0x00002000, 0x00002000, 0x00002000,0x00002000, 0x00002000, 0x00002000, 0x00002000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00000000, 0x00000000, 0x00000000, 0x00004000,0x00004100, 0x00004000, 0xFFFFFFFF, 0xFFFFFFFF,0x00000000, 0x00000000, 0x00000000, 0x00004000,0x00004100, 0x00004000, 0xFFFFFFFF, 0x00004000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0xFFFFFFFF, 0xFFFFFFFF, 0x00004100, 0x00004000,0x00004000, 0x00004000, 0x00004000, 0x00004000,0x00004000, 0x00004000, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0x00000000, 0x00000000, 0x00000000, 0x00000000,0x00000000, 0x00000000, 0x00000000, 0x00000000,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF};
static int GetOpCodeSize (PBYTE Start){
	DWORD* Tlb=(DWORD*)MaskTable;
	PBYTE pOPCode;
	DWORD t, c;
	BYTE dh, dl, al;
	int OpCodeSize =-1;
	t = 0;
	pOPCode = (PBYTE) Start;
	c = 0;

	do {
		t &= 0x0F7;
		c = *(BYTE *) pOPCode++;
		t |= Tlb[c] ;
	} while( ((t & 0x000000FF) & 8) != 0);

	if ((c == 0x0F6) || (c == 0x0F7)){
		t |= 0x00004000;
		if ( (0x38 & *(BYTE *) pOPCode++) == 0)
			t |= 0x00008000;
	}else if (c == 0x0CD){
		t |= 0x00000100;
		if ( (*(BYTE *) pOPCode++) == 0x20)
			t |= 0x00000400;
	}else if (c == 0x0F){
		al = *(BYTE *) pOPCode++;
		t |= Tlb[al + 0x100];
		if (t == 0xFFFFFFFF)
			return OpCodeSize;
	}

	if ((((t & 0x0000FF00) >> 8) & 0x80) != 0){
		dh = static_cast<BYTE> ((t & 0x0000FF00) >> 8);
		dh ^= 0x20;
		if ((c & 1) == 0) 
			dh ^= 0x21;
		t &= 0xFFFF00FF;
		t |= (dh << 8);
	}

	if ((((t & 0x0000FF00) >> 8) & 0x40) != 0 ) {
		al = *(BYTE *) pOPCode++;
		c = (DWORD)al;
		c |= (al << 8);
		c &= 0xC007;
		if ( (c & 0x0000FF00) != 0xC000 ){
			if ( ((t & 0x000000FF) & 0x10) == 0){
				if ((c & 0x000000FF) == 4){
					al = *(BYTE *) pOPCode++;
					al &= 7;
					c &= 0x0000FF00;
					c |= al;
				}
				if ((c & 0x0000FF00) != 0x4000)	{
					if ((c & 0x0000FF00) == 0x8000)    t |= 4;
						else if (c==5) 
							t |= 4;
				}
				else
					t |= 1;
			}else{
				if (c != 6)	{
					if((c & 0x0000FF00) == 0x4000)
						t |= 1;
					else if ((c & 0x0000FF00) == 0x8000) 
						t |= 2;
				}
				else
					t |= 2;
			}
		}
	}

	if ((((t & 0x000000FF)) & 0x20) != 0){
		dl = static_cast<BYTE> (t & 0x000000FF);
		dl ^= 2;
		t &= 0xFFFFFF00;
		t |= dl;
		if ((dl & 0x10) == 0){
			dl ^= 6;
			t &= 0xFFFFFF00;
			t |= dl;
		}
	}

	if ((((t & 0x0000FF00) >> 8) & 0x20) != 0){
		dh = static_cast<BYTE> ((t & 0x0000FF00) >> 8);
		dh ^= 2;   
		t &= 0xFFFF00FF;
		t |= (dh << 8);
		if ((dh & 0x10) == 0){
			if (dh & 0x40) //是否是 0x6x
				dh ^= 1;   // 当dh = 0x2x 这里计算多2，当＝62的时候却是 异或1
			t &= 0xFFFFFF00;
			t |= dh;
		}
	}

	OpCodeSize = reinterpret_cast<DWORD> (pOPCode) - reinterpret_cast<DWORD> (Start);
	t &= 0x707;
	OpCodeSize += t & 0x000000FF;
	OpCodeSize += (t & 0x0000FF00) >> 8;

	if (((*(char*)Start) & 0x000000FF) == 0x66)    
		if ( OpCodeSize >= 6)   
			OpCodeSize -= 2;   //减2处理 ，将 dword 型转成 word 型

	return OpCodeSize;
}



#define HOOK_LEN	5
#define HOOK_RET_OLD_LEN 10
#define MAX_LEN		100
struct HookEnv{
	addr_t dwAddr;
	uint32 dwLen;
	uint8 szOldCode[MAX_LEN];//file
	uint8 szNewCode[MAX_LEN];//mem
};

static void UnHook(HookEnv &h){
	EnableWrite(h.dwAddr);
	memcpy((void*)h.dwAddr,h.szOldCode,h.dwLen);
	DisableWrite(h.dwAddr);
}

static void InitHookEnv(HookEnv &h){
	h.dwAddr = 0;
	h.dwLen = 0;
	memset(h.szOldCode,0x90,MAX_LEN);
	memset(h.szNewCode,0x90,MAX_LEN);
}
static bool Hook(HookEnv &h,addr_t dwAddrOld,addr_t dwAddrNew,bool ModifyOld = true){
	h.dwAddr = dwAddrOld;
	//保存老代码
	while (h.dwLen < HOOK_LEN)	{
		h.dwLen += GetOpCodeSize(PBYTE(h.dwAddr) + h.dwLen);
	}
	memcpy(h.szOldCode,(PVOID)h.dwAddr,h.dwLen);
	// 保存老代码,跳回老代码
	EnableWrite(&h.szOldCode[h.dwLen]);
	SetJmpTo(&h.szOldCode[h.dwLen],(PBYTE)h.dwAddr+h.dwLen,E_JMP);
	DisableWrite(&h.szOldCode[h.dwLen]);

	if (ModifyOld){
		// 修改老代码
		EnableWrite(h.dwAddr);
		SetJmpTo((uint8*)h.dwAddr,(uint8*)dwAddrNew,E_JMP);
		DisableWrite(h.dwAddr);
	}

	return true;
}